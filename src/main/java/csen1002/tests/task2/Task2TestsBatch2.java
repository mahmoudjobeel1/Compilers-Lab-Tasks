package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch2 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#h;j;l;n;u#0,h,1;1,e,2;1,e,4;2,l,3;3,e,6;4,j,5;5,e,6;6,n,7;7,e,11;8,u,9;9,e,11;10,e,0;10,e,8#10#11");
		assertEquals("-1;0/8/10;1/2/4;3/6;5/6;7/11;9/11#h;j;l;n;u#-1,h,-1;-1,j,-1;-1,l,-1;-1,n,-1;-1,u,-1;0/8/10,h,1/2/4;0/8/10,j,-1;0/8/10,l,-1;0/8/10,n,-1;0/8/10,u,9/11;1/2/4,h,-1;1/2/4,j,5/6;1/2/4,l,3/6;1/2/4,n,-1;1/2/4,u,-1;3/6,h,-1;3/6,j,-1;3/6,l,-1;3/6,n,7/11;3/6,u,-1;5/6,h,-1;5/6,j,-1;5/6,l,-1;5/6,n,7/11;5/6,u,-1;7/11,h,-1;7/11,j,-1;7/11,l,-1;7/11,n,-1;7/11,u,-1;9/11,h,-1;9/11,j,-1;9/11,l,-1;9/11,n,-1;9/11,u,-1#0/8/10#7/11;9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#d;n;v;z#0,v,1;1,n,2;2,e,0;2,e,4;3,e,0;3,e,4;4,d,5;5,e,11;6,z,7;7,e,6;7,e,9;8,e,6;8,e,9;9,e,11;10,e,3;10,e,8#10#11");
		assertEquals("-1;0/2/4;0/3/4/6/8/9/10/11;1;5/11;6/7/9/11#d;n;v;z#-1,d,-1;-1,n,-1;-1,v,-1;-1,z,-1;0/2/4,d,5/11;0/2/4,n,-1;0/2/4,v,1;0/2/4,z,-1;0/3/4/6/8/9/10/11,d,5/11;0/3/4/6/8/9/10/11,n,-1;0/3/4/6/8/9/10/11,v,1;0/3/4/6/8/9/10/11,z,6/7/9/11;1,d,-1;1,n,0/2/4;1,v,-1;1,z,-1;5/11,d,-1;5/11,n,-1;5/11,v,-1;5/11,z,-1;6/7/9/11,d,-1;6/7/9/11,n,-1;6/7/9/11,v,-1;6/7/9/11,z,6/7/9/11#0/3/4/6/8/9/10/11#0/3/4/6/8/9/10/11;5/11;6/7/9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#d;r#0,d,1;0,d,0;0,d,9;0,d,8;0,r,6;0,r,7;0,r,9;0,r,3;0,r,8;0,r,1;0,r,2;1,d,2;1,d,3;1,d,8;1,d,4;1,d,7;1,r,3;1,r,1;1,r,8;1,r,4;1,r,0;2,d,9;2,d,3;2,d,6;2,d,1;2,d,5;2,r,4;2,r,9;2,r,6;2,r,3;3,d,1;3,d,8;3,d,6;3,d,9;3,r,0;3,r,8;3,r,1;3,r,6;3,r,3;3,r,5;3,r,9;4,d,9;4,d,6;4,d,7;4,d,3;4,d,0;4,r,8;4,r,9;4,r,5;4,r,6;5,d,9;5,d,1;5,d,6;5,d,7;5,d,3;5,r,1;5,r,5;5,r,7;5,r,9;6,d,5;6,d,3;6,d,8;6,d,2;6,d,6;6,d,4;6,r,1;6,r,7;6,r,0;6,r,4;6,r,9;6,r,8;7,d,4;7,d,6;7,d,7;7,d,5;7,r,1;7,r,9;7,r,3;7,r,2;7,r,7;7,r,6;8,d,9;8,d,8;8,d,3;8,d,5;8,d,4;8,d,7;8,d,1;8,r,2;8,r,3;8,r,0;8,r,1;8,r,6;8,r,5;8,r,9;9,d,8;9,d,3;9,d,6;9,d,4;9,d,9;9,d,2;9,r,5;9,r,7;9,r,4;9,r,2#9#6;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9;0/1/3/4/5/6/7/9;1/2/3/4/5/6/7/8/9;2/3/4/6/8/9;2/4/5/7;9#d;r#0/1/2/3/4/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,r,0/1/2/3/4/5/6/7/8/9;0/1/3/4/5/6/7/9,d,0/1/2/3/4/5/6/7/8/9;0/1/3/4/5/6/7/9,r,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6/7/8/9,r,0/1/2/3/4/5/6/7/8/9;2/3/4/6/8/9,d,0/1/2/3/4/5/6/7/8/9;2/3/4/6/8/9,r,0/1/2/3/4/5/6/7/8/9;2/4/5/7,d,0/1/3/4/5/6/7/9;2/4/5/7,r,1/2/3/4/5/6/7/8/9;9,d,2/3/4/6/8/9;9,r,2/4/5/7#9#0/1/2/3/4/5/6/7/8/9;0/1/3/4/5/6/7/9;1/2/3/4/5/6/7/8/9;2/3/4/6/8/9;9", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#l;u#0,l,10;0,l,6;0,l,1;0,l,9;0,l,3;0,l,5;0,l,7;0,u,3;0,u,0;0,u,10;0,u,9;0,u,1;0,u,6;0,u,4;1,l,7;1,l,8;1,l,0;1,l,5;1,l,3;1,l,10;1,u,7;1,u,5;1,u,9;1,u,10;1,u,2;1,u,3;2,l,0;2,l,9;2,l,2;2,l,5;2,l,3;2,l,10;2,u,9;2,u,1;2,u,5;2,u,10;3,l,2;3,l,4;3,l,1;3,l,10;3,l,0;3,l,8;3,l,3;3,u,1;3,u,2;3,u,9;3,u,4;3,u,5;3,u,7;3,u,10;4,l,4;4,l,8;4,l,1;4,l,3;4,l,7;4,l,2;4,u,4;4,u,5;4,u,3;4,u,0;4,u,9;5,l,7;5,l,3;5,l,10;5,l,0;5,l,9;5,u,1;5,u,2;5,u,3;5,u,5;6,l,5;6,l,6;6,l,7;6,l,8;6,l,9;6,l,2;6,u,9;6,u,3;6,u,4;6,u,6;6,u,7;6,u,1;6,u,0;7,l,0;7,l,8;7,l,2;7,l,9;7,l,6;7,u,8;7,u,0;7,u,3;7,u,5;8,l,9;8,l,4;8,l,3;8,l,8;8,l,2;8,u,0;8,u,9;8,u,3;8,u,8;8,u,10;8,u,5;8,u,7;9,l,7;9,l,1;9,l,3;9,l,6;9,l,8;9,l,0;9,l,10;9,u,9;9,u,5;9,u,6;9,u,8;10,l,5;10,l,1;10,l,10;10,l,7;10,l,9;10,l,8;10,l,4;10,u,4;10,u,3;10,u,1;10,u,0;10,u,9;10,u,10;10,u,8#0#2;6;9");
		assertEquals("0;0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/6/9/10;1/3/5/6/7/9/10#l;u#0,l,1/3/5/6/7/9/10;0,u,0/1/3/4/6/9/10;0/1/2/3/4/5/6/7/8/9/10,l,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,u,0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/6/9/10,l,0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/6/9/10,u,0/1/2/3/4/5/6/7/8/9/10;1/3/5/6/7/9/10,l,0/1/2/3/4/5/6/7/8/9/10;1/3/5/6/7/9/10,u,0/1/2/3/4/5/6/7/8/9/10#0#0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/6/9/10;1/3/5/6/7/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#a;c;v;y#0,a,2;0,a,6;0,a,3;0,a,4;0,a,8;0,a,1;0,a,7;0,c,2;0,c,5;0,c,6;0,c,7;0,c,4;0,c,0;0,c,3;0,v,3;0,v,6;0,v,0;0,v,4;0,v,5;0,v,8;0,v,1;0,y,5;0,y,2;0,y,6;0,y,7;1,a,1;1,a,2;1,a,3;1,a,7;1,a,8;1,a,5;1,c,6;1,c,4;1,c,8;1,c,3;1,c,5;1,v,8;1,v,3;1,v,2;1,v,4;1,y,4;1,y,2;1,y,1;1,y,6;2,a,4;2,a,0;2,a,6;2,a,8;2,c,0;2,c,8;2,c,6;2,c,2;2,v,5;2,v,2;2,v,7;2,v,4;2,v,8;2,y,0;2,y,1;2,y,6;2,y,7;2,y,4;2,y,5;2,y,3;3,a,8;3,a,6;3,a,4;3,a,7;3,a,3;3,c,4;3,c,0;3,c,2;3,c,6;3,c,8;3,c,5;3,v,8;3,v,2;3,v,0;3,v,5;3,v,1;3,v,3;3,y,5;3,y,0;3,y,6;3,y,8;3,y,4;3,y,2;4,a,5;4,a,2;4,a,1;4,a,6;4,a,0;4,c,6;4,c,8;4,c,7;4,c,0;4,v,4;4,v,6;4,v,8;4,v,2;4,v,5;4,y,3;4,y,8;4,y,5;4,y,0;4,y,2;4,y,4;5,a,7;5,a,5;5,a,8;5,a,0;5,a,2;5,a,3;5,a,6;5,c,6;5,c,4;5,c,3;5,c,1;5,v,1;5,v,6;5,v,0;5,v,5;5,y,2;5,y,8;5,y,0;5,y,4;6,a,8;6,a,6;6,a,0;6,a,1;6,a,2;6,a,3;6,a,7;6,c,8;6,c,7;6,c,1;6,c,0;6,c,6;6,v,8;6,v,7;6,v,1;6,v,0;6,y,0;6,y,7;6,y,1;6,y,2;6,y,4;7,a,2;7,a,1;7,a,6;7,a,7;7,a,0;7,a,3;7,c,3;7,c,8;7,c,6;7,c,0;7,c,7;7,v,1;7,v,3;7,v,8;7,v,4;7,y,0;7,y,6;7,y,2;7,y,7;8,a,6;8,a,4;8,a,7;8,a,3;8,a,1;8,c,0;8,c,2;8,c,1;8,c,3;8,c,5;8,v,2;8,v,7;8,v,6;8,v,1;8,y,4;8,y,8;8,y,2;8,y,1;8,y,6#3#0;3;8");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/5/8;0/2/4/5/6/8;3;3/4/6/7/8#a;c;v;y#0/1/2/3/4/5/6/7/8,a,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,v,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,y,0/1/2/3/4/5/6/7/8;0/1/2/3/5/8,a,0/1/2/3/4/5/6/7/8;0/1/2/3/5/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/5/8,v,0/1/2/3/4/5/6/7/8;0/1/2/3/5/8,y,0/1/2/3/4/5/6/7/8;0/2/4/5/6/8,a,0/1/2/3/4/5/6/7/8;0/2/4/5/6/8,c,0/1/2/3/4/5/6/7/8;0/2/4/5/6/8,v,0/1/2/3/4/5/6/7/8;0/2/4/5/6/8,y,0/1/2/3/4/5/6/7/8;3,a,3/4/6/7/8;3,c,0/2/4/5/6/8;3,v,0/1/2/3/5/8;3,y,0/2/4/5/6/8;3/4/6/7/8,a,0/1/2/3/4/5/6/7/8;3/4/6/7/8,c,0/1/2/3/4/5/6/7/8;3/4/6/7/8,v,0/1/2/3/4/5/6/7/8;3/4/6/7/8,y,0/1/2/3/4/5/6/7/8#3#0/1/2/3/4/5/6/7/8;0/1/2/3/5/8;0/2/4/5/6/8;3;3/4/6/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#b;i#0,b,0;0,b,4;0,b,6;0,b,7;0,b,2;0,i,0;0,i,3;0,i,2;0,i,4;0,i,7;1,b,7;1,b,6;1,b,4;1,b,3;1,b,0;1,i,0;1,i,1;1,i,4;1,i,6;1,i,2;1,i,3;1,i,5;2,b,3;2,b,2;2,b,0;2,b,5;2,i,0;2,i,1;2,i,7;2,i,5;2,i,4;3,b,2;3,b,1;3,b,5;3,b,6;3,b,0;3,i,7;3,i,5;3,i,4;3,i,2;3,i,1;3,i,3;4,b,0;4,b,2;4,b,3;4,b,5;4,b,7;4,b,4;4,b,1;4,i,0;4,i,4;4,i,5;4,i,6;4,i,7;4,i,1;4,i,2;5,b,1;5,b,0;5,b,2;5,b,4;5,b,7;5,b,6;5,i,4;5,i,1;5,i,0;5,i,2;5,i,5;5,i,7;6,b,4;6,b,5;6,b,6;6,b,0;6,i,4;6,i,0;6,i,7;6,i,1;6,i,2;6,i,6;6,i,3;7,b,0;7,b,5;7,b,7;7,b,4;7,b,2;7,b,1;7,i,7;7,i,0;7,i,5;7,i,6;7,i,4;7,i,1;7,i,3#7#3;5;6;7");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/4/5/7;0/1/3/4/5/6/7;7#b;i#0/1/2/3/4/5/6/7,b,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,i,0/1/2/3/4/5/6/7;0/1/2/4/5/7,b,0/1/2/3/4/5/6/7;0/1/2/4/5/7,i,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,b,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,i,0/1/2/3/4/5/6/7;7,b,0/1/2/4/5/7;7,i,0/1/3/4/5/6/7#7#0/1/2/3/4/5/6/7;0/1/2/4/5/7;0/1/3/4/5/6/7;7", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12;13#j;l;u#0,l,1;1,e,13;2,u,3;3,e,7;4,e,5;5,e,7;6,e,2;6,e,4;7,e,11;8,j,9;9,e,11;10,e,6;10,e,8;11,e,13;12,e,0;12,e,10#12#13");
		assertEquals("-1;0/2/4/5/6/7/8/10/11/12/13;1/13;3/7/11/13;9/11/13#j;l;u#-1,j,-1;-1,l,-1;-1,u,-1;0/2/4/5/6/7/8/10/11/12/13,j,9/11/13;0/2/4/5/6/7/8/10/11/12/13,l,1/13;0/2/4/5/6/7/8/10/11/12/13,u,3/7/11/13;1/13,j,-1;1/13,l,-1;1/13,u,-1;3/7/11/13,j,-1;3/7/11/13,l,-1;3/7/11/13,u,-1;9/11/13,j,-1;9/11/13,l,-1;9/11/13,u,-1#0/2/4/5/6/7/8/10/11/12/13#0/2/4/5/6/7/8/10/11/12/13;1/13;3/7/11/13;9/11/13", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#q;t;x#0,q,6;0,q,0;0,q,7;0,q,5;0,q,2;0,t,3;0,t,0;0,t,7;0,t,8;0,t,2;0,t,4;0,x,4;0,x,8;0,x,5;0,x,3;1,q,2;1,q,0;1,q,1;1,q,4;1,q,7;1,q,3;1,q,6;1,t,5;1,t,0;1,t,7;1,t,6;1,x,6;1,x,3;1,x,0;1,x,8;1,x,5;1,x,2;2,q,0;2,q,6;2,q,8;2,q,5;2,t,8;2,t,5;2,t,0;2,t,6;2,x,6;2,x,1;2,x,5;2,x,4;3,q,7;3,q,1;3,q,3;3,q,6;3,q,4;3,t,3;3,t,8;3,t,0;3,t,5;3,t,6;3,t,4;3,t,2;3,x,1;3,x,4;3,x,3;3,x,0;3,x,8;3,x,5;4,q,0;4,q,2;4,q,6;4,q,4;4,q,7;4,q,3;4,q,8;4,t,8;4,t,3;4,t,4;4,t,6;4,x,8;4,x,5;4,x,3;4,x,2;4,x,7;4,x,6;4,x,4;5,q,8;5,q,7;5,q,0;5,q,6;5,t,4;5,t,0;5,t,2;5,t,8;5,t,6;5,t,3;5,x,1;5,x,2;5,x,7;5,x,0;5,x,8;5,x,6;6,q,1;6,q,6;6,q,2;6,q,8;6,q,4;6,t,1;6,t,2;6,t,5;6,t,7;6,t,4;6,x,7;6,x,6;6,x,1;6,x,2;6,x,4;6,x,8;6,x,3;7,q,0;7,q,4;7,q,7;7,q,5;7,q,6;7,q,1;7,t,8;7,t,3;7,t,1;7,t,5;7,t,7;7,t,6;7,x,6;7,x,1;7,x,4;7,x,5;7,x,0;7,x,7;8,q,5;8,q,6;8,q,8;8,q,0;8,q,4;8,q,3;8,q,1;8,t,6;8,t,7;8,t,0;8,t,8;8,t,3;8,t,1;8,t,5;8,x,7;8,x,1;8,x,6;8,x,2;8,x,8;8,x,4;8,x,0#3#4;5;7");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/3/4/5/8;0/2/3/4/5/6/8;1/3/4/6/7;3#q;t;x#0/1/2/3/4/5/6/7/8,q,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,t,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,x,0/1/2/3/4/5/6/7/8;0/1/3/4/5/8,q,0/1/2/3/4/5/6/7/8;0/1/3/4/5/8,t,0/1/2/3/4/5/6/7/8;0/1/3/4/5/8,x,0/1/2/3/4/5/6/7/8;0/2/3/4/5/6/8,q,0/1/2/3/4/5/6/7/8;0/2/3/4/5/6/8,t,0/1/2/3/4/5/6/7/8;0/2/3/4/5/6/8,x,0/1/2/3/4/5/6/7/8;1/3/4/6/7,q,0/1/2/3/4/5/6/7/8;1/3/4/6/7,t,0/1/2/3/4/5/6/7/8;1/3/4/6/7,x,0/1/2/3/4/5/6/7/8;3,q,1/3/4/6/7;3,t,0/2/3/4/5/6/8;3,x,0/1/3/4/5/8#3#0/1/2/3/4/5/6/7/8;0/1/3/4/5/8;0/2/3/4/5/6/8;1/3/4/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#d;l;t;w;z#0,z,1;1,l,2;2,e,6;3,d,4;4,e,6;5,e,0;5,e,3;6,e,5;6,e,8;7,e,5;7,e,8;8,t,9;9,w,10#7#10");
		assertEquals("-1;0/2/3/5/6/8;0/3/4/5/6/8;0/3/5/7/8;1;9;10#d;l;t;w;z#-1,d,-1;-1,l,-1;-1,t,-1;-1,w,-1;-1,z,-1;0/2/3/5/6/8,d,0/3/4/5/6/8;0/2/3/5/6/8,l,-1;0/2/3/5/6/8,t,9;0/2/3/5/6/8,w,-1;0/2/3/5/6/8,z,1;0/3/4/5/6/8,d,0/3/4/5/6/8;0/3/4/5/6/8,l,-1;0/3/4/5/6/8,t,9;0/3/4/5/6/8,w,-1;0/3/4/5/6/8,z,1;0/3/5/7/8,d,0/3/4/5/6/8;0/3/5/7/8,l,-1;0/3/5/7/8,t,9;0/3/5/7/8,w,-1;0/3/5/7/8,z,1;1,d,-1;1,l,0/2/3/5/6/8;1,t,-1;1,w,-1;1,z,-1;9,d,-1;9,l,-1;9,t,-1;9,w,10;9,z,-1;10,d,-1;10,l,-1;10,t,-1;10,w,-1;10,z,-1#0/3/5/7/8#10", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5#h;p;t;w;x#0,p,1;1,w,2;2,t,3;3,h,4;4,x,5#0#5");
		assertEquals("-1;0;1;2;3;4;5#h;p;t;w;x#-1,h,-1;-1,p,-1;-1,t,-1;-1,w,-1;-1,x,-1;0,h,-1;0,p,1;0,t,-1;0,w,-1;0,x,-1;1,h,-1;1,p,-1;1,t,-1;1,w,2;1,x,-1;2,h,-1;2,p,-1;2,t,3;2,w,-1;2,x,-1;3,h,4;3,p,-1;3,t,-1;3,w,-1;3,x,-1;4,h,-1;4,p,-1;4,t,-1;4,w,-1;4,x,5;5,h,-1;5,p,-1;5,t,-1;5,w,-1;5,x,-1#0#5", nfaToDfa.toString());
	}

}